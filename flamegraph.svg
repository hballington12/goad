<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="19889548023"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (156,549,961 samples, 0.79%)</title><rect x="0.0006%" y="757" width="0.7871%" height="15" fill="rgb(227,0,7)" fg:x="123253" fg:w="156549961"/><text x="0.2506%" y="767.50"></text></g><g><title>__GI___libc_free (83,156,137 samples, 0.42%)</title><rect x="0.7877%" y="757" width="0.4181%" height="15" fill="rgb(217,0,24)" fg:x="156673214" fg:w="83156137"/><text x="1.0377%" y="767.50"></text></g><g><title>__GI___libc_malloc (14,677,585 samples, 0.07%)</title><rect x="1.2058%" y="757" width="0.0738%" height="15" fill="rgb(221,193,54)" fg:x="239829351" fg:w="14677585"/><text x="1.4558%" y="767.50"></text></g><g><title>__sincosf_fma (205,597,453 samples, 1.03%)</title><rect x="1.2796%" y="757" width="1.0337%" height="15" fill="rgb(248,212,6)" fg:x="254506936" fg:w="205597453"/><text x="1.5296%" y="767.50"></text></g><g><title>sincosf_poly (9,787,827 samples, 0.05%)</title><rect x="2.2641%" y="741" width="0.0492%" height="15" fill="rgb(208,68,35)" fg:x="450316562" fg:w="9787827"/><text x="2.5141%" y="751.50"></text></g><g><title>_int_malloc (9,784,227 samples, 0.05%)</title><rect x="2.3133%" y="757" width="0.0492%" height="15" fill="rgb(232,128,0)" fg:x="460104389" fg:w="9784227"/><text x="2.5633%" y="767.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (73,382,922 samples, 0.37%)</title><rect x="2.3625%" y="757" width="0.3690%" height="15" fill="rgb(207,160,47)" fg:x="469888616" fg:w="73382922"/><text x="2.6125%" y="767.50"></text></g><g><title>[[heap]] (562,701,935 samples, 2.83%)</title><rect x="0.0006%" y="773" width="2.8291%" height="15" fill="rgb(228,23,34)" fg:x="123253" fg:w="562701935"/><text x="0.2506%" y="783.50">[[..</text></g><g><title>std::io::Write::write_fmt (19,553,650 samples, 0.10%)</title><rect x="2.7314%" y="757" width="0.0983%" height="15" fill="rgb(218,30,26)" fg:x="543271538" fg:w="19553650"/><text x="2.9814%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,892,712 samples, 0.02%)</title><rect x="2.8298%" y="757" width="0.0246%" height="15" fill="rgb(220,122,19)" fg:x="562825188" fg:w="4892712"/><text x="3.0798%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19,572,155 samples, 0.10%)</title><rect x="2.8544%" y="757" width="0.0984%" height="15" fill="rgb(250,228,42)" fg:x="567717900" fg:w="19572155"/><text x="3.1044%" y="767.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (9,786,353 samples, 0.05%)</title><rect x="2.9528%" y="757" width="0.0492%" height="15" fill="rgb(240,193,28)" fg:x="587290055" fg:w="9786353"/><text x="3.2028%" y="767.50"></text></g><g><title>__GI___libc_free (9,784,433 samples, 0.05%)</title><rect x="3.0020%" y="757" width="0.0492%" height="15" fill="rgb(216,20,37)" fg:x="597076408" fg:w="9784433"/><text x="3.2520%" y="767.50"></text></g><g><title>__libc_calloc (9,785,553 samples, 0.05%)</title><rect x="3.0512%" y="757" width="0.0492%" height="15" fill="rgb(206,188,39)" fg:x="606860841" fg:w="9785553"/><text x="3.3012%" y="767.50"></text></g><g><title>__sincosf_fma (24,460,315 samples, 0.12%)</title><rect x="3.1004%" y="757" width="0.1230%" height="15" fill="rgb(217,207,13)" fg:x="616646394" fg:w="24460315"/><text x="3.3504%" y="767.50"></text></g><g><title>[[stack]] (88,065,431 samples, 0.44%)</title><rect x="2.8298%" y="773" width="0.4428%" height="15" fill="rgb(231,73,38)" fg:x="562825188" fg:w="88065431"/><text x="3.0798%" y="783.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (9,783,910 samples, 0.05%)</title><rect x="3.2233%" y="757" width="0.0492%" height="15" fill="rgb(225,20,46)" fg:x="641106709" fg:w="9783910"/><text x="3.4733%" y="767.50"></text></g><g><title>[anon] (4,893,176 samples, 0.02%)</title><rect x="3.2725%" y="773" width="0.0246%" height="15" fill="rgb(210,31,41)" fg:x="650890619" fg:w="4893176"/><text x="3.5225%" y="783.50"></text></g><g><title>std::io::Write::write_fmt (4,893,176 samples, 0.02%)</title><rect x="3.2725%" y="757" width="0.0246%" height="15" fill="rgb(221,200,47)" fg:x="650890619" fg:w="4893176"/><text x="3.5225%" y="767.50"></text></g><g><title>[libc.so.6] (29,941,393 samples, 0.15%)</title><rect x="3.2971%" y="773" width="0.1505%" height="15" fill="rgb(226,26,5)" fg:x="655783795" fg:w="29941393"/><text x="3.5471%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29,941,393 samples, 0.15%)</title><rect x="3.2971%" y="757" width="0.1505%" height="15" fill="rgb(249,33,26)" fg:x="655783795" fg:w="29941393"/><text x="3.5471%" y="767.50"></text></g><g><title>[problem-diff] (4,893,531 samples, 0.02%)</title><rect x="3.4477%" y="773" width="0.0246%" height="15" fill="rgb(235,183,28)" fg:x="685725188" fg:w="4893531"/><text x="3.6977%" y="783.50"></text></g><g><title>indicatif::draw_target::Drawable::draw (4,893,531 samples, 0.02%)</title><rect x="3.4477%" y="757" width="0.0246%" height="15" fill="rgb(221,5,38)" fg:x="685725188" fg:w="4893531"/><text x="3.6977%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19,561,359 samples, 0.10%)</title><rect x="3.4969%" y="757" width="0.0983%" height="15" fill="rgb(247,18,42)" fg:x="695511729" fg:w="19561359"/><text x="3.7469%" y="767.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (24,422,606 samples, 0.12%)</title><rect x="3.5952%" y="757" width="0.1228%" height="15" fill="rgb(241,131,45)" fg:x="715073088" fg:w="24422606"/><text x="3.8452%" y="767.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="757" width="0.0937%" height="15" fill="rgb(249,31,29)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="767.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="741" width="0.0937%" height="15" fill="rgb(225,111,53)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="751.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="725" width="0.0937%" height="15" fill="rgb(238,160,17)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="735.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="709" width="0.0937%" height="15" fill="rgb(214,148,48)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="719.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="693" width="0.0937%" height="15" fill="rgb(232,36,49)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="703.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="677" width="0.0937%" height="15" fill="rgb(209,103,24)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="687.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="661" width="0.0937%" height="15" fill="rgb(229,88,8)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="671.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="645" width="0.0937%" height="15" fill="rgb(213,181,19)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="655.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="629" width="0.0937%" height="15" fill="rgb(254,191,54)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="639.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="613" width="0.0937%" height="15" fill="rgb(241,83,37)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="623.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="597" width="0.0937%" height="15" fill="rgb(233,36,39)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="607.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="581" width="0.0937%" height="15" fill="rgb(226,3,54)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="591.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="565" width="0.0937%" height="15" fill="rgb(245,192,40)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="575.50"></text></g><g><title>[unknown] (18,634,004 samples, 0.09%)</title><rect x="3.7180%" y="549" width="0.0937%" height="15" fill="rgb(238,167,29)" fg:x="739495694" fg:w="18634004"/><text x="3.9680%" y="559.50"></text></g><g><title>[unknown] (8,033,826 samples, 0.04%)</title><rect x="3.7713%" y="533" width="0.0404%" height="15" fill="rgb(232,182,51)" fg:x="750095872" fg:w="8033826"/><text x="4.0213%" y="543.50"></text></g><g><title>[unknown] (8,033,826 samples, 0.04%)</title><rect x="3.7713%" y="517" width="0.0404%" height="15" fill="rgb(231,60,39)" fg:x="750095872" fg:w="8033826"/><text x="4.0213%" y="527.50"></text></g><g><title>[unknown] (8,033,826 samples, 0.04%)</title><rect x="3.7713%" y="501" width="0.0404%" height="15" fill="rgb(208,69,12)" fg:x="750095872" fg:w="8033826"/><text x="4.0213%" y="511.50"></text></g><g><title>[unknown] (8,033,826 samples, 0.04%)</title><rect x="3.7713%" y="485" width="0.0404%" height="15" fill="rgb(235,93,37)" fg:x="750095872" fg:w="8033826"/><text x="4.0213%" y="495.50"></text></g><g><title>__GI___libc_malloc (9,773,561 samples, 0.05%)</title><rect x="3.8117%" y="757" width="0.0491%" height="15" fill="rgb(213,116,39)" fg:x="758129698" fg:w="9773561"/><text x="4.0617%" y="767.50"></text></g><g><title>__libc_calloc (4,892,301 samples, 0.02%)</title><rect x="3.8608%" y="757" width="0.0246%" height="15" fill="rgb(222,207,29)" fg:x="767903259" fg:w="4892301"/><text x="4.1108%" y="767.50"></text></g><g><title>__memset_avx2_unaligned_erms (4,893,597 samples, 0.02%)</title><rect x="3.8854%" y="757" width="0.0246%" height="15" fill="rgb(206,96,30)" fg:x="772795560" fg:w="4893597"/><text x="4.1354%" y="767.50"></text></g><g><title>__sincosf_fma (4,866,361 samples, 0.02%)</title><rect x="3.9100%" y="757" width="0.0245%" height="15" fill="rgb(218,138,4)" fg:x="777689157" fg:w="4866361"/><text x="4.1600%" y="767.50"></text></g><g><title>_int_free (63,602,145 samples, 0.32%)</title><rect x="3.9345%" y="757" width="0.3198%" height="15" fill="rgb(250,191,14)" fg:x="782555518" fg:w="63602145"/><text x="4.1845%" y="767.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (4,892,756 samples, 0.02%)</title><rect x="4.2543%" y="757" width="0.0246%" height="15" fill="rgb(239,60,40)" fg:x="846157663" fg:w="4892756"/><text x="4.5043%" y="767.50"></text></g><g><title>core::num::flt2dec::digits_to_dec_str (4,894,567 samples, 0.02%)</title><rect x="4.2789%" y="757" width="0.0246%" height="15" fill="rgb(206,27,48)" fg:x="851050419" fg:w="4894567"/><text x="4.5289%" y="767.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (9,786,411 samples, 0.05%)</title><rect x="4.3035%" y="757" width="0.0492%" height="15" fill="rgb(225,35,8)" fg:x="855944986" fg:w="9786411"/><text x="4.5535%" y="767.50"></text></g><g><title>pbt::diff::diffraction (381,569,088 samples, 1.92%)</title><rect x="4.3527%" y="757" width="1.9184%" height="15" fill="rgb(250,213,24)" fg:x="865731397" fg:w="381569088"/><text x="4.6027%" y="767.50">p..</text></g><g><title>[unknown] (561,573,799 samples, 2.82%)</title><rect x="3.4723%" y="773" width="2.8235%" height="15" fill="rgb(247,123,22)" fg:x="690618719" fg:w="561573799"/><text x="3.7223%" y="783.50">[u..</text></g><g><title>pbt::output::writeup (4,892,033 samples, 0.02%)</title><rect x="6.2711%" y="757" width="0.0246%" height="15" fill="rgb(231,138,38)" fg:x="1247300485" fg:w="4892033"/><text x="6.5211%" y="767.50"></text></g><g><title>__libc_calloc (4,890,061 samples, 0.02%)</title><rect x="6.2957%" y="773" width="0.0246%" height="15" fill="rgb(231,145,46)" fg:x="1252192518" fg:w="4890061"/><text x="6.5457%" y="783.50"></text></g><g><title>indicatif::progress_bar::ProgressBar::tick_inner (4,894,414 samples, 0.02%)</title><rect x="6.3203%" y="613" width="0.0246%" height="15" fill="rgb(251,118,11)" fg:x="1257082579" fg:w="4894414"/><text x="6.5703%" y="623.50"></text></g><g><title>indicatif::state::BarState::update_estimate_and_draw (4,894,414 samples, 0.02%)</title><rect x="6.3203%" y="597" width="0.0246%" height="15" fill="rgb(217,147,25)" fg:x="1257082579" fg:w="4894414"/><text x="6.5703%" y="607.50"></text></g><g><title>indicatif::state::BarState::draw (4,894,414 samples, 0.02%)</title><rect x="6.3203%" y="581" width="0.0246%" height="15" fill="rgb(247,81,37)" fg:x="1257082579" fg:w="4894414"/><text x="6.5703%" y="591.50"></text></g><g><title>indicatif::style::ProgressStyle::format_state (4,894,414 samples, 0.02%)</title><rect x="6.3203%" y="565" width="0.0246%" height="15" fill="rgb(209,12,38)" fg:x="1257082579" fg:w="4894414"/><text x="6.5703%" y="575.50"></text></g><g><title>__GI___libc_free (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="597" width="0.0247%" height="15" fill="rgb(227,1,9)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="607.50"></text></g><g><title>__GI_munmap (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="581" width="0.0247%" height="15" fill="rgb(248,47,43)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="591.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="565" width="0.0247%" height="15" fill="rgb(221,10,30)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="575.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="549" width="0.0247%" height="15" fill="rgb(210,229,1)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="559.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="533" width="0.0247%" height="15" fill="rgb(222,148,37)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="543.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="517" width="0.0247%" height="15" fill="rgb(234,67,33)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="527.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="501" width="0.0247%" height="15" fill="rgb(247,98,35)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="511.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="485" width="0.0247%" height="15" fill="rgb(247,138,52)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="495.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="469" width="0.0247%" height="15" fill="rgb(213,79,30)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="479.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="453" width="0.0247%" height="15" fill="rgb(246,177,23)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="463.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="437" width="0.0247%" height="15" fill="rgb(230,62,27)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="447.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="421" width="0.0247%" height="15" fill="rgb(216,154,8)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="431.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="405" width="0.0247%" height="15" fill="rgb(244,35,45)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="415.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="389" width="0.0247%" height="15" fill="rgb(251,115,12)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="399.50"></text></g><g><title>[unknown] (4,902,975 samples, 0.02%)</title><rect x="7.4026%" y="373" width="0.0247%" height="15" fill="rgb(240,54,50)" fg:x="1472352340" fg:w="4902975"/><text x="7.6526%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (582,207,392 samples, 2.93%)</title><rect x="57.4993%" y="565" width="2.9272%" height="15" fill="rgb(233,84,52)" fg:x="11436351718" fg:w="582207392"/><text x="57.7493%" y="575.50">&lt;c..</text></g><g><title>[unknown] (4,891,654 samples, 0.02%)</title><rect x="60.4265%" y="565" width="0.0246%" height="15" fill="rgb(207,117,47)" fg:x="12018559110" fg:w="4891654"/><text x="60.6765%" y="575.50"></text></g><g><title>[unknown] (4,891,654 samples, 0.02%)</title><rect x="60.4265%" y="549" width="0.0246%" height="15" fill="rgb(249,43,39)" fg:x="12018559110" fg:w="4891654"/><text x="60.6765%" y="559.50"></text></g><g><title>checked_request2size (48,988,614 samples, 0.25%)</title><rect x="61.1395%" y="549" width="0.2463%" height="15" fill="rgb(209,38,44)" fg:x="12160379711" fg:w="48988614"/><text x="61.3895%" y="559.50"></text></g><g><title>__GI___libc_malloc (215,277,536 samples, 1.08%)</title><rect x="60.4511%" y="565" width="1.0824%" height="15" fill="rgb(236,212,23)" fg:x="12023450764" fg:w="215277536"/><text x="60.7011%" y="575.50"></text></g><g><title>tcache_get (29,359,975 samples, 0.15%)</title><rect x="61.3859%" y="549" width="0.1476%" height="15" fill="rgb(242,79,21)" fg:x="12209368325" fg:w="29359975"/><text x="61.6359%" y="559.50"></text></g><g><title>tcache_get_n (29,359,975 samples, 0.15%)</title><rect x="61.3859%" y="533" width="0.1476%" height="15" fill="rgb(211,96,35)" fg:x="12209368325" fg:w="29359975"/><text x="61.6359%" y="543.50"></text></g><g><title>__rdl_alloc (107,632,938 samples, 0.54%)</title><rect x="61.5335%" y="565" width="0.5412%" height="15" fill="rgb(253,215,40)" fg:x="12238728300" fg:w="107632938"/><text x="61.7835%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,625,135,832 samples, 8.17%)</title><rect x="53.9530%" y="581" width="8.1708%" height="15" fill="rgb(211,81,21)" fg:x="10731011793" fg:w="1625135832"/><text x="54.2030%" y="591.50">&lt;alloc::vec..</text></g><g><title>__rust_alloc (9,786,387 samples, 0.05%)</title><rect x="62.0746%" y="565" width="0.0492%" height="15" fill="rgb(208,190,38)" fg:x="12346361238" fg:w="9786387"/><text x="62.3246%" y="575.50"></text></g><g><title>[unknown] (34,447,420 samples, 0.17%)</title><rect x="62.1238%" y="581" width="0.1732%" height="15" fill="rgb(235,213,38)" fg:x="12356147625" fg:w="34447420"/><text x="62.3738%" y="591.50"></text></g><g><title>[unknown] (34,447,420 samples, 0.17%)</title><rect x="62.1238%" y="565" width="0.1732%" height="15" fill="rgb(237,122,38)" fg:x="12356147625" fg:w="34447420"/><text x="62.3738%" y="575.50"></text></g><g><title>[unknown] (34,447,420 samples, 0.17%)</title><rect x="62.1238%" y="549" width="0.1732%" height="15" fill="rgb(244,218,35)" fg:x="12356147625" fg:w="34447420"/><text x="62.3738%" y="559.50"></text></g><g><title>[unknown] (34,447,420 samples, 0.17%)</title><rect x="62.1238%" y="533" width="0.1732%" height="15" fill="rgb(240,68,47)" fg:x="12356147625" fg:w="34447420"/><text x="62.3738%" y="543.50"></text></g><g><title>[unknown] (34,447,420 samples, 0.17%)</title><rect x="62.1238%" y="517" width="0.1732%" height="15" fill="rgb(210,16,53)" fg:x="12356147625" fg:w="34447420"/><text x="62.3738%" y="527.50"></text></g><g><title>[unknown] (34,447,420 samples, 0.17%)</title><rect x="62.1238%" y="501" width="0.1732%" height="15" fill="rgb(235,124,12)" fg:x="12356147625" fg:w="34447420"/><text x="62.3738%" y="511.50"></text></g><g><title>[unknown] (34,447,420 samples, 0.17%)</title><rect x="62.1238%" y="485" width="0.1732%" height="15" fill="rgb(224,169,11)" fg:x="12356147625" fg:w="34447420"/><text x="62.3738%" y="495.50"></text></g><g><title>[unknown] (34,447,420 samples, 0.17%)</title><rect x="62.1238%" y="469" width="0.1732%" height="15" fill="rgb(250,166,2)" fg:x="12356147625" fg:w="34447420"/><text x="62.3738%" y="479.50"></text></g><g><title>[unknown] (34,447,420 samples, 0.17%)</title><rect x="62.1238%" y="453" width="0.1732%" height="15" fill="rgb(242,216,29)" fg:x="12356147625" fg:w="34447420"/><text x="62.3738%" y="463.50"></text></g><g><title>[unknown] (34,371,178 samples, 0.17%)</title><rect x="62.1242%" y="437" width="0.1728%" height="15" fill="rgb(230,116,27)" fg:x="12356223867" fg:w="34371178"/><text x="62.3742%" y="447.50"></text></g><g><title>[unknown] (34,371,178 samples, 0.17%)</title><rect x="62.1242%" y="421" width="0.1728%" height="15" fill="rgb(228,99,48)" fg:x="12356223867" fg:w="34371178"/><text x="62.3742%" y="431.50"></text></g><g><title>[unknown] (19,675,736 samples, 0.10%)</title><rect x="62.1981%" y="405" width="0.0989%" height="15" fill="rgb(253,11,6)" fg:x="12370919309" fg:w="19675736"/><text x="62.4481%" y="415.50"></text></g><g><title>[unknown] (19,675,736 samples, 0.10%)</title><rect x="62.1981%" y="389" width="0.0989%" height="15" fill="rgb(247,143,39)" fg:x="12370919309" fg:w="19675736"/><text x="62.4481%" y="399.50"></text></g><g><title>[unknown] (19,675,736 samples, 0.10%)</title><rect x="62.1981%" y="373" width="0.0989%" height="15" fill="rgb(236,97,10)" fg:x="12370919309" fg:w="19675736"/><text x="62.4481%" y="383.50"></text></g><g><title>[unknown] (14,781,887 samples, 0.07%)</title><rect x="62.2227%" y="357" width="0.0743%" height="15" fill="rgb(233,208,19)" fg:x="12375813158" fg:w="14781887"/><text x="62.4727%" y="367.50"></text></g><g><title>[unknown] (14,781,887 samples, 0.07%)</title><rect x="62.2227%" y="341" width="0.0743%" height="15" fill="rgb(216,164,2)" fg:x="12375813158" fg:w="14781887"/><text x="62.4727%" y="351.50"></text></g><g><title>[unknown] (9,888,165 samples, 0.05%)</title><rect x="62.2473%" y="325" width="0.0497%" height="15" fill="rgb(220,129,5)" fg:x="12380706880" fg:w="9888165"/><text x="62.4973%" y="335.50"></text></g><g><title>[unknown] (9,888,165 samples, 0.05%)</title><rect x="62.2473%" y="309" width="0.0497%" height="15" fill="rgb(242,17,10)" fg:x="12380706880" fg:w="9888165"/><text x="62.4973%" y="319.50"></text></g><g><title>[unknown] (9,888,165 samples, 0.05%)</title><rect x="62.2473%" y="293" width="0.0497%" height="15" fill="rgb(242,107,0)" fg:x="12380706880" fg:w="9888165"/><text x="62.4973%" y="303.50"></text></g><g><title>[unknown] (9,888,165 samples, 0.05%)</title><rect x="62.2473%" y="277" width="0.0497%" height="15" fill="rgb(251,28,31)" fg:x="12380706880" fg:w="9888165"/><text x="62.4973%" y="287.50"></text></g><g><title>free_perturb (9,784,991 samples, 0.05%)</title><rect x="69.1291%" y="549" width="0.0492%" height="15" fill="rgb(233,223,10)" fg:x="13749472078" fg:w="9784991"/><text x="69.3791%" y="559.50"></text></g><g><title>_int_free (1,036,009,312 samples, 5.21%)</title><rect x="64.8056%" y="565" width="5.2088%" height="15" fill="rgb(215,21,27)" fg:x="12889546960" fg:w="1036009312"/><text x="65.0556%" y="575.50">_int_f..</text></g><g><title>tcache_put (166,299,203 samples, 0.84%)</title><rect x="69.1783%" y="549" width="0.8361%" height="15" fill="rgb(232,23,21)" fg:x="13759257069" fg:w="166299203"/><text x="69.4283%" y="559.50"></text></g><g><title>__GI___libc_free (1,608,358,592 samples, 8.09%)</title><rect x="62.2970%" y="581" width="8.0865%" height="15" fill="rgb(244,5,23)" fg:x="12390595045" fg:w="1608358592"/><text x="62.5470%" y="591.50">__GI___libc..</text></g><g><title>arena_for_chunk (73,397,365 samples, 0.37%)</title><rect x="70.0144%" y="565" width="0.3690%" height="15" fill="rgb(226,81,46)" fg:x="13925556272" fg:w="73397365"/><text x="70.2644%" y="575.50"></text></g><g><title>checked_request2size (24,464,838 samples, 0.12%)</title><rect x="70.6295%" y="565" width="0.1230%" height="15" fill="rgb(247,70,30)" fg:x="14047878914" fg:w="24464838"/><text x="70.8795%" y="575.50"></text></g><g><title>__GI___libc_malloc (146,781,723 samples, 0.74%)</title><rect x="70.3835%" y="581" width="0.7380%" height="15" fill="rgb(212,68,19)" fg:x="13998953637" fg:w="146781723"/><text x="70.6335%" y="591.50"></text></g><g><title>tcache_get (73,391,608 samples, 0.37%)</title><rect x="70.7525%" y="565" width="0.3690%" height="15" fill="rgb(240,187,13)" fg:x="14072343752" fg:w="73391608"/><text x="71.0025%" y="575.50"></text></g><g><title>tcache_get_n (73,391,608 samples, 0.37%)</title><rect x="70.7525%" y="549" width="0.3690%" height="15" fill="rgb(223,113,26)" fg:x="14072343752" fg:w="73391608"/><text x="71.0025%" y="559.50"></text></g><g><title>__memset_avx2_unaligned_erms (39,149,737 samples, 0.20%)</title><rect x="71.1215%" y="581" width="0.1968%" height="15" fill="rgb(206,192,2)" fg:x="14145735360" fg:w="39149737"/><text x="71.3715%" y="591.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="565" width="0.0246%" height="15" fill="rgb(241,108,4)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="575.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="549" width="0.0246%" height="15" fill="rgb(247,173,49)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="559.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="533" width="0.0246%" height="15" fill="rgb(224,114,35)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="543.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="517" width="0.0246%" height="15" fill="rgb(245,159,27)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="527.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="501" width="0.0246%" height="15" fill="rgb(245,172,44)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="511.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="485" width="0.0246%" height="15" fill="rgb(236,23,11)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="495.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="469" width="0.0246%" height="15" fill="rgb(205,117,38)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="479.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="453" width="0.0246%" height="15" fill="rgb(237,72,25)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="463.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="437" width="0.0246%" height="15" fill="rgb(244,70,9)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="447.50"></text></g><g><title>[unknown] (4,896,781 samples, 0.02%)</title><rect x="71.2937%" y="421" width="0.0246%" height="15" fill="rgb(217,125,39)" fg:x="14179988316" fg:w="4896781"/><text x="71.5437%" y="431.50"></text></g><g><title>__rdl_alloc (39,083,499 samples, 0.20%)</title><rect x="71.3183%" y="581" width="0.1965%" height="15" fill="rgb(235,36,10)" fg:x="14184885097" fg:w="39083499"/><text x="71.5683%" y="591.50"></text></g><g><title>__rdl_dealloc (191,070,302 samples, 0.96%)</title><rect x="71.5148%" y="581" width="0.9607%" height="15" fill="rgb(251,123,47)" fg:x="14223968596" fg:w="191070302"/><text x="71.7648%" y="591.50"></text></g><g><title>__rust_alloc (24,450,988 samples, 0.12%)</title><rect x="72.4754%" y="581" width="0.1229%" height="15" fill="rgb(221,13,13)" fg:x="14415038898" fg:w="24450988"/><text x="72.7254%" y="591.50"></text></g><g><title>__rust_dealloc (44,035,203 samples, 0.22%)</title><rect x="72.5984%" y="581" width="0.2214%" height="15" fill="rgb(238,131,9)" fg:x="14439489886" fg:w="44035203"/><text x="72.8484%" y="591.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="565" width="0.0246%" height="15" fill="rgb(211,50,8)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="575.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="549" width="0.0246%" height="15" fill="rgb(245,182,24)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="559.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="533" width="0.0246%" height="15" fill="rgb(242,14,37)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="543.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="517" width="0.0246%" height="15" fill="rgb(246,228,12)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="527.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="501" width="0.0246%" height="15" fill="rgb(213,55,15)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="511.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="485" width="0.0246%" height="15" fill="rgb(209,9,3)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="495.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="469" width="0.0246%" height="15" fill="rgb(230,59,30)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="479.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="453" width="0.0246%" height="15" fill="rgb(209,121,21)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="463.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="437" width="0.0246%" height="15" fill="rgb(220,109,13)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="447.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="421" width="0.0246%" height="15" fill="rgb(232,18,1)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="431.50"></text></g><g><title>[unknown] (4,893,087 samples, 0.02%)</title><rect x="77.7566%" y="405" width="0.0246%" height="15" fill="rgb(215,41,42)" fg:x="15465445081" fg:w="4893087"/><text x="78.0066%" y="415.50"></text></g><g><title>abstop12 (251,536,553 samples, 1.26%)</title><rect x="77.7812%" y="565" width="1.2647%" height="15" fill="rgb(224,123,36)" fg:x="15470338168" fg:w="251536553"/><text x="78.0312%" y="575.50"></text></g><g><title>reduce_fast (429,930,495 samples, 2.16%)</title><rect x="79.0459%" y="565" width="2.1616%" height="15" fill="rgb(240,125,3)" fg:x="15721874721" fg:w="429930495"/><text x="79.2959%" y="575.50">r..</text></g><g><title>reduce_large (156,501,687 samples, 0.79%)</title><rect x="81.2075%" y="565" width="0.7869%" height="15" fill="rgb(205,98,50)" fg:x="16151805216" fg:w="156501687"/><text x="81.4575%" y="575.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="549" width="0.0246%" height="15" fill="rgb(205,185,37)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="559.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="533" width="0.0246%" height="15" fill="rgb(238,207,15)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="543.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="517" width="0.0246%" height="15" fill="rgb(213,199,42)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="527.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="501" width="0.0246%" height="15" fill="rgb(235,201,11)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="511.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="485" width="0.0246%" height="15" fill="rgb(207,46,11)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="495.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="469" width="0.0246%" height="15" fill="rgb(241,35,35)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="479.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="453" width="0.0246%" height="15" fill="rgb(243,32,47)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="463.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="437" width="0.0246%" height="15" fill="rgb(247,202,23)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="447.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="421" width="0.0246%" height="15" fill="rgb(219,102,11)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="431.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="405" width="0.0246%" height="15" fill="rgb(243,110,44)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="415.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="389" width="0.0246%" height="15" fill="rgb(222,74,54)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="399.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="373" width="0.0246%" height="15" fill="rgb(216,99,12)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="383.50"></text></g><g><title>[unknown] (4,894,182 samples, 0.02%)</title><rect x="86.3893%" y="357" width="0.0246%" height="15" fill="rgb(226,22,26)" fg:x="17182438258" fg:w="4894182"/><text x="86.6393%" y="367.50"></text></g><g><title>__sincosf_fma (3,051,993,507 samples, 15.34%)</title><rect x="72.8198%" y="581" width="15.3447%" height="15" fill="rgb(217,163,10)" fg:x="14483525089" fg:w="3051993507"/><text x="73.0698%" y="591.50">__sincosf_fma</text></g><g><title>sincosf_poly (1,227,211,693 samples, 6.17%)</title><rect x="81.9944%" y="565" width="6.1701%" height="15" fill="rgb(213,25,53)" fg:x="16308306903" fg:w="1227211693"/><text x="82.2444%" y="575.50">sincosf_..</text></g><g><title>v2df_to_sf (348,186,156 samples, 1.75%)</title><rect x="86.4139%" y="549" width="1.7506%" height="15" fill="rgb(252,105,26)" fg:x="17187332440" fg:w="348186156"/><text x="86.6639%" y="559.50"></text></g><g><title>[unknown] (4,890,896 samples, 0.02%)</title><rect x="88.1399%" y="533" width="0.0246%" height="15" fill="rgb(220,39,43)" fg:x="17530627700" fg:w="4890896"/><text x="88.3899%" y="543.50"></text></g><g><title>checked_request2size (39,118,025 samples, 0.20%)</title><rect x="92.1399%" y="533" width="0.1967%" height="15" fill="rgb(229,68,48)" fg:x="18326205596" fg:w="39118025"/><text x="92.3899%" y="543.50"></text></g><g><title>_int_malloc (269,058,328 samples, 1.35%)</title><rect x="91.0823%" y="549" width="1.3528%" height="15" fill="rgb(252,8,32)" fg:x="18115863570" fg:w="269058328"/><text x="91.3323%" y="559.50"></text></g><g><title>tcache_put (19,598,277 samples, 0.10%)</title><rect x="92.3366%" y="533" width="0.0985%" height="15" fill="rgb(223,20,43)" fg:x="18365323621" fg:w="19598277"/><text x="92.5866%" y="543.50"></text></g><g><title>__libc_calloc (666,210,770 samples, 3.35%)</title><rect x="89.1347%" y="565" width="3.3496%" height="15" fill="rgb(229,81,49)" fg:x="17728496089" fg:w="666210770"/><text x="89.3847%" y="575.50">__l..</text></g><g><title>arena_for_chunk (9,784,961 samples, 0.05%)</title><rect x="92.4351%" y="549" width="0.0492%" height="15" fill="rgb(236,28,36)" fg:x="18384921898" fg:w="9784961"/><text x="92.6851%" y="559.50"></text></g><g><title>__memset_avx2_unaligned_erms (4,892,574 samples, 0.02%)</title><rect x="92.4843%" y="565" width="0.0246%" height="15" fill="rgb(249,185,26)" fg:x="18394706859" fg:w="4892574"/><text x="92.7343%" y="575.50"></text></g><g><title>__rdl_alloc_zeroed (97,801,764 samples, 0.49%)</title><rect x="92.5089%" y="565" width="0.4917%" height="15" fill="rgb(249,174,33)" fg:x="18399599433" fg:w="97801764"/><text x="92.7589%" y="575.50"></text></g><g><title>__rust_alloc_zeroed (14,676,896 samples, 0.07%)</title><rect x="93.0006%" y="565" width="0.0738%" height="15" fill="rgb(233,201,37)" fg:x="18497401197" fg:w="14676896"/><text x="93.2506%" y="575.50"></text></g><g><title>pbt::beam::Beam::diffract (17,269,671,624 samples, 86.83%)</title><rect x="6.3449%" y="613" width="86.8279%" height="15" fill="rgb(221,78,26)" fg:x="1261976993" fg:w="17269671624"/><text x="6.5949%" y="623.50">pbt::beam::Beam::diffract</text></g><g><title>pbt::diff::diffraction (17,054,393,302 samples, 85.75%)</title><rect x="7.4273%" y="597" width="85.7455%" height="15" fill="rgb(250,127,30)" fg:x="1477255315" fg:w="17054393302"/><text x="7.6773%" y="607.50">pbt::diff::diffraction</text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (996,130,021 samples, 5.01%)</title><rect x="88.1645%" y="581" width="5.0083%" height="15" fill="rgb(230,49,44)" fg:x="17535518596" fg:w="996130021"/><text x="88.4145%" y="591.50">ndarra..</text></g><g><title>_int_malloc (19,570,524 samples, 0.10%)</title><rect x="93.0744%" y="565" width="0.0984%" height="15" fill="rgb(229,67,23)" fg:x="18512078093" fg:w="19570524"/><text x="93.3244%" y="575.50"></text></g><g><title>[unknown] (14,617,376 samples, 0.07%)</title><rect x="93.3202%" y="597" width="0.0735%" height="15" fill="rgb(249,83,47)" fg:x="18560974975" fg:w="14617376"/><text x="93.5702%" y="607.50"></text></g><g><title>[unknown] (14,617,376 samples, 0.07%)</title><rect x="93.3202%" y="581" width="0.0735%" height="15" fill="rgb(215,43,3)" fg:x="18560974975" fg:w="14617376"/><text x="93.5702%" y="591.50"></text></g><g><title>[unknown] (14,617,376 samples, 0.07%)</title><rect x="93.3202%" y="565" width="0.0735%" height="15" fill="rgb(238,154,13)" fg:x="18560974975" fg:w="14617376"/><text x="93.5702%" y="575.50"></text></g><g><title>[unknown] (14,617,376 samples, 0.07%)</title><rect x="93.3202%" y="549" width="0.0735%" height="15" fill="rgb(219,56,2)" fg:x="18560974975" fg:w="14617376"/><text x="93.5702%" y="559.50"></text></g><g><title>[unknown] (14,617,376 samples, 0.07%)</title><rect x="93.3202%" y="533" width="0.0735%" height="15" fill="rgb(233,0,4)" fg:x="18560974975" fg:w="14617376"/><text x="93.5702%" y="543.50"></text></g><g><title>[unknown] (14,617,376 samples, 0.07%)</title><rect x="93.3202%" y="517" width="0.0735%" height="15" fill="rgb(235,30,7)" fg:x="18560974975" fg:w="14617376"/><text x="93.5702%" y="527.50"></text></g><g><title>[unknown] (14,617,376 samples, 0.07%)</title><rect x="93.3202%" y="501" width="0.0735%" height="15" fill="rgb(250,79,13)" fg:x="18560974975" fg:w="14617376"/><text x="93.5702%" y="511.50"></text></g><g><title>[unknown] (14,617,376 samples, 0.07%)</title><rect x="93.3202%" y="485" width="0.0735%" height="15" fill="rgb(211,146,34)" fg:x="18560974975" fg:w="14617376"/><text x="93.5702%" y="495.50"></text></g><g><title>[unknown] (9,745,101 samples, 0.05%)</title><rect x="93.3447%" y="469" width="0.0490%" height="15" fill="rgb(228,22,38)" fg:x="18565847250" fg:w="9745101"/><text x="93.5947%" y="479.50"></text></g><g><title>[unknown] (9,745,101 samples, 0.05%)</title><rect x="93.3447%" y="453" width="0.0490%" height="15" fill="rgb(235,168,5)" fg:x="18565847250" fg:w="9745101"/><text x="93.5947%" y="463.50"></text></g><g><title>__GI___close (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="597" width="0.0492%" height="15" fill="rgb(221,155,16)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="607.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="581" width="0.0492%" height="15" fill="rgb(215,215,53)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="591.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="565" width="0.0492%" height="15" fill="rgb(223,4,10)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="575.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="549" width="0.0492%" height="15" fill="rgb(234,103,6)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="559.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="533" width="0.0492%" height="15" fill="rgb(227,97,0)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="543.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="517" width="0.0492%" height="15" fill="rgb(234,150,53)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="527.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="501" width="0.0492%" height="15" fill="rgb(228,201,54)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="511.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="485" width="0.0492%" height="15" fill="rgb(222,22,37)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="495.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="469" width="0.0492%" height="15" fill="rgb(237,53,32)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="479.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="453" width="0.0492%" height="15" fill="rgb(233,25,53)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="463.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="437" width="0.0492%" height="15" fill="rgb(210,40,34)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="447.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="421" width="0.0492%" height="15" fill="rgb(241,220,44)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="431.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="405" width="0.0492%" height="15" fill="rgb(235,28,35)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="415.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="389" width="0.0492%" height="15" fill="rgb(210,56,17)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="399.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="373" width="0.0492%" height="15" fill="rgb(224,130,29)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="383.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="357" width="0.0492%" height="15" fill="rgb(235,212,8)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="367.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="341" width="0.0492%" height="15" fill="rgb(223,33,50)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="351.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="325" width="0.0492%" height="15" fill="rgb(219,149,13)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="335.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="309" width="0.0492%" height="15" fill="rgb(250,156,29)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="319.50"></text></g><g><title>[unknown] (9,788,936 samples, 0.05%)</title><rect x="93.3937%" y="293" width="0.0492%" height="15" fill="rgb(216,193,19)" fg:x="18575592351" fg:w="9788936"/><text x="93.6437%" y="303.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="277" width="0.0246%" height="15" fill="rgb(216,135,14)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="287.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="261" width="0.0246%" height="15" fill="rgb(241,47,5)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="271.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="245" width="0.0246%" height="15" fill="rgb(233,42,35)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="255.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="229" width="0.0246%" height="15" fill="rgb(231,13,6)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="239.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="213" width="0.0246%" height="15" fill="rgb(207,181,40)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="223.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="197" width="0.0246%" height="15" fill="rgb(254,173,49)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="207.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="181" width="0.0246%" height="15" fill="rgb(221,1,38)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="191.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="165" width="0.0246%" height="15" fill="rgb(206,124,46)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="175.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="149" width="0.0246%" height="15" fill="rgb(249,21,11)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="159.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="133" width="0.0246%" height="15" fill="rgb(222,201,40)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="143.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="117" width="0.0246%" height="15" fill="rgb(235,61,29)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="127.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="101" width="0.0246%" height="15" fill="rgb(219,207,3)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="111.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="85" width="0.0246%" height="15" fill="rgb(222,56,46)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="95.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="69" width="0.0246%" height="15" fill="rgb(239,76,54)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="79.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="53" width="0.0246%" height="15" fill="rgb(231,124,27)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="63.50"></text></g><g><title>[unknown] (4,893,782 samples, 0.02%)</title><rect x="93.4183%" y="37" width="0.0246%" height="15" fill="rgb(249,195,6)" fg:x="18580487505" fg:w="4893782"/><text x="93.6683%" y="47.50"></text></g><g><title>__GI___libc_free (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="597" width="0.0246%" height="15" fill="rgb(237,174,47)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="607.50"></text></g><g><title>__GI_munmap (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="581" width="0.0246%" height="15" fill="rgb(206,201,31)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="591.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="565" width="0.0246%" height="15" fill="rgb(231,57,52)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="575.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="549" width="0.0246%" height="15" fill="rgb(248,177,22)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="559.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="533" width="0.0246%" height="15" fill="rgb(215,211,37)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="543.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="517" width="0.0246%" height="15" fill="rgb(241,128,51)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="527.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="501" width="0.0246%" height="15" fill="rgb(227,165,31)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="511.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="485" width="0.0246%" height="15" fill="rgb(228,167,24)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="495.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="469" width="0.0246%" height="15" fill="rgb(228,143,12)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="479.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="453" width="0.0246%" height="15" fill="rgb(249,149,8)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="463.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="437" width="0.0246%" height="15" fill="rgb(243,35,44)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="447.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="421" width="0.0246%" height="15" fill="rgb(246,89,9)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="431.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="405" width="0.0246%" height="15" fill="rgb(233,213,13)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="415.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="389" width="0.0246%" height="15" fill="rgb(233,141,41)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="399.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="373" width="0.0246%" height="15" fill="rgb(239,167,4)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="383.50"></text></g><g><title>[unknown] (4,890,815 samples, 0.02%)</title><rect x="93.4430%" y="357" width="0.0246%" height="15" fill="rgb(209,217,16)" fg:x="18585381287" fg:w="4890815"/><text x="93.6930%" y="367.50"></text></g><g><title>std::fs::OpenOptions::_open (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="597" width="0.0735%" height="15" fill="rgb(219,88,35)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="607.50"></text></g><g><title>__libc_open64 (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="581" width="0.0735%" height="15" fill="rgb(220,193,23)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="591.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="565" width="0.0735%" height="15" fill="rgb(230,90,52)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="575.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="549" width="0.0735%" height="15" fill="rgb(252,106,19)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="559.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="533" width="0.0735%" height="15" fill="rgb(206,74,20)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="543.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="517" width="0.0735%" height="15" fill="rgb(230,138,44)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="527.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="501" width="0.0735%" height="15" fill="rgb(235,182,43)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="511.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="485" width="0.0735%" height="15" fill="rgb(242,16,51)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="495.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="469" width="0.0735%" height="15" fill="rgb(248,9,4)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="479.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="453" width="0.0735%" height="15" fill="rgb(210,31,22)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="463.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="437" width="0.0735%" height="15" fill="rgb(239,54,39)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="447.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="421" width="0.0735%" height="15" fill="rgb(230,99,41)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="431.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="405" width="0.0735%" height="15" fill="rgb(253,106,12)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="415.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="389" width="0.0735%" height="15" fill="rgb(213,46,41)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="399.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="373" width="0.0735%" height="15" fill="rgb(215,133,35)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="383.50"></text></g><g><title>[unknown] (14,626,059 samples, 0.07%)</title><rect x="93.4675%" y="357" width="0.0735%" height="15" fill="rgb(213,28,5)" fg:x="18590272102" fg:w="14626059"/><text x="93.7175%" y="367.50"></text></g><g><title>[unknown] (9,748,715 samples, 0.05%)</title><rect x="93.4921%" y="341" width="0.0490%" height="15" fill="rgb(215,77,49)" fg:x="18595149446" fg:w="9748715"/><text x="93.7421%" y="351.50"></text></g><g><title>[unknown] (9,748,715 samples, 0.05%)</title><rect x="93.4921%" y="325" width="0.0490%" height="15" fill="rgb(248,100,22)" fg:x="18595149446" fg:w="9748715"/><text x="93.7421%" y="335.50"></text></g><g><title>[unknown] (9,748,715 samples, 0.05%)</title><rect x="93.4921%" y="309" width="0.0490%" height="15" fill="rgb(208,67,9)" fg:x="18595149446" fg:w="9748715"/><text x="93.7421%" y="319.50"></text></g><g><title>[unknown] (9,748,715 samples, 0.05%)</title><rect x="93.4921%" y="293" width="0.0490%" height="15" fill="rgb(219,133,21)" fg:x="18595149446" fg:w="9748715"/><text x="93.7421%" y="303.50"></text></g><g><title>[unknown] (4,873,707 samples, 0.02%)</title><rect x="93.5166%" y="277" width="0.0245%" height="15" fill="rgb(246,46,29)" fg:x="18600024454" fg:w="4873707"/><text x="93.7666%" y="287.50"></text></g><g><title>[unknown] (4,873,707 samples, 0.02%)</title><rect x="93.5166%" y="261" width="0.0245%" height="15" fill="rgb(246,185,52)" fg:x="18600024454" fg:w="4873707"/><text x="93.7666%" y="271.50"></text></g><g><title>[unknown] (4,873,707 samples, 0.02%)</title><rect x="93.5166%" y="245" width="0.0245%" height="15" fill="rgb(252,136,11)" fg:x="18600024454" fg:w="4873707"/><text x="93.7666%" y="255.50"></text></g><g><title>[unknown] (4,873,707 samples, 0.02%)</title><rect x="93.5166%" y="229" width="0.0245%" height="15" fill="rgb(219,138,53)" fg:x="18600024454" fg:w="4873707"/><text x="93.7666%" y="239.50"></text></g><g><title>[unknown] (4,873,707 samples, 0.02%)</title><rect x="93.5166%" y="213" width="0.0245%" height="15" fill="rgb(211,51,23)" fg:x="18600024454" fg:w="4873707"/><text x="93.7666%" y="223.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (9,785,679 samples, 0.05%)</title><rect x="93.8609%" y="565" width="0.0492%" height="15" fill="rgb(247,221,28)" fg:x="18668509111" fg:w="9785679"/><text x="94.1109%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4,893,286 samples, 0.02%)</title><rect x="93.9593%" y="549" width="0.0246%" height="15" fill="rgb(251,222,45)" fg:x="18688082143" fg:w="4893286"/><text x="94.2093%" y="559.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (24,466,857 samples, 0.12%)</title><rect x="93.9101%" y="565" width="0.1230%" height="15" fill="rgb(217,162,53)" fg:x="18678294790" fg:w="24466857"/><text x="94.1601%" y="575.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="549" width="0.0492%" height="15" fill="rgb(229,93,14)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="559.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="533" width="0.0492%" height="15" fill="rgb(209,67,49)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="543.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="517" width="0.0492%" height="15" fill="rgb(213,87,29)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="527.50"></text></g><g><title>__GI___libc_write (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="501" width="0.0492%" height="15" fill="rgb(205,151,52)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="511.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="485" width="0.0492%" height="15" fill="rgb(253,215,39)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="495.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="469" width="0.0492%" height="15" fill="rgb(221,220,41)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="479.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="453" width="0.0492%" height="15" fill="rgb(218,133,21)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="463.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="437" width="0.0492%" height="15" fill="rgb(221,193,43)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="447.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="421" width="0.0492%" height="15" fill="rgb(240,128,52)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="431.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="405" width="0.0492%" height="15" fill="rgb(253,114,12)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="415.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="389" width="0.0492%" height="15" fill="rgb(215,223,47)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="399.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="373" width="0.0492%" height="15" fill="rgb(248,225,23)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="383.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="357" width="0.0492%" height="15" fill="rgb(250,108,0)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="367.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="341" width="0.0492%" height="15" fill="rgb(228,208,7)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="351.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="325" width="0.0492%" height="15" fill="rgb(244,45,10)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="335.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="309" width="0.0492%" height="15" fill="rgb(207,125,25)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="319.50"></text></g><g><title>[unknown] (9,786,218 samples, 0.05%)</title><rect x="93.9839%" y="293" width="0.0492%" height="15" fill="rgb(210,195,18)" fg:x="18692975429" fg:w="9786218"/><text x="94.2339%" y="303.50"></text></g><g><title>[unknown] (4,893,951 samples, 0.02%)</title><rect x="94.0085%" y="277" width="0.0246%" height="15" fill="rgb(249,80,12)" fg:x="18697867696" fg:w="4893951"/><text x="94.2585%" y="287.50"></text></g><g><title>[unknown] (4,893,951 samples, 0.02%)</title><rect x="94.0085%" y="261" width="0.0246%" height="15" fill="rgb(221,65,9)" fg:x="18697867696" fg:w="4893951"/><text x="94.2585%" y="271.50"></text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f32&gt;::fmt (24,449,048 samples, 0.12%)</title><rect x="94.0331%" y="565" width="0.1229%" height="15" fill="rgb(235,49,36)" fg:x="18702761647" fg:w="24449048"/><text x="94.2831%" y="575.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (9,767,158 samples, 0.05%)</title><rect x="95.1464%" y="533" width="0.0491%" height="15" fill="rgb(225,32,20)" fg:x="18924196135" fg:w="9767158"/><text x="95.3964%" y="543.50"></text></g><g><title>[problem-diff] (24,418,524 samples, 0.12%)</title><rect x="95.1464%" y="549" width="0.1228%" height="15" fill="rgb(215,141,46)" fg:x="18924196135" fg:w="24418524"/><text x="95.3964%" y="559.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14,651,366 samples, 0.07%)</title><rect x="95.1955%" y="533" width="0.0737%" height="15" fill="rgb(250,160,47)" fg:x="18933963293" fg:w="14651366"/><text x="95.4455%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (34,238,591 samples, 0.17%)</title><rect x="95.2692%" y="549" width="0.1721%" height="15" fill="rgb(216,222,40)" fg:x="18948614659" fg:w="34238591"/><text x="95.5192%" y="559.50"></text></g><g><title>__memcpy_avx_unaligned_erms (88,024,811 samples, 0.44%)</title><rect x="96.2481%" y="517" width="0.4426%" height="15" fill="rgb(234,217,39)" fg:x="19143313854" fg:w="88024811"/><text x="96.4981%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (273,029,236 samples, 1.37%)</title><rect x="95.4414%" y="549" width="1.3727%" height="15" fill="rgb(207,178,40)" fg:x="18982853250" fg:w="273029236"/><text x="95.6914%" y="559.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (146,819,715 samples, 0.74%)</title><rect x="96.0759%" y="533" width="0.7382%" height="15" fill="rgb(221,136,13)" fg:x="19109062771" fg:w="146819715"/><text x="96.3259%" y="543.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="517" width="0.1234%" height="15" fill="rgb(249,199,10)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="527.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="501" width="0.1234%" height="15" fill="rgb(249,222,13)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="511.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="485" width="0.1234%" height="15" fill="rgb(244,185,38)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="495.50"></text></g><g><title>__GI___libc_write (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="469" width="0.1234%" height="15" fill="rgb(236,202,9)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="479.50"></text></g><g><title>[unknown] (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="453" width="0.1234%" height="15" fill="rgb(250,229,37)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="463.50"></text></g><g><title>[unknown] (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="437" width="0.1234%" height="15" fill="rgb(206,174,23)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="447.50"></text></g><g><title>[unknown] (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="421" width="0.1234%" height="15" fill="rgb(211,33,43)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="431.50"></text></g><g><title>[unknown] (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="405" width="0.1234%" height="15" fill="rgb(245,58,50)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="415.50"></text></g><g><title>[unknown] (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="389" width="0.1234%" height="15" fill="rgb(244,68,36)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="399.50"></text></g><g><title>[unknown] (24,543,821 samples, 0.12%)</title><rect x="96.6907%" y="373" width="0.1234%" height="15" fill="rgb(232,229,15)" fg:x="19231338665" fg:w="24543821"/><text x="96.9407%" y="383.50"></text></g><g><title>[unknown] (19,650,659 samples, 0.10%)</title><rect x="96.7153%" y="357" width="0.0988%" height="15" fill="rgb(254,30,23)" fg:x="19236231827" fg:w="19650659"/><text x="96.9653%" y="367.50"></text></g><g><title>[unknown] (19,650,659 samples, 0.10%)</title><rect x="96.7153%" y="341" width="0.0988%" height="15" fill="rgb(235,160,14)" fg:x="19236231827" fg:w="19650659"/><text x="96.9653%" y="351.50"></text></g><g><title>[unknown] (19,650,659 samples, 0.10%)</title><rect x="96.7153%" y="325" width="0.0988%" height="15" fill="rgb(212,155,44)" fg:x="19236231827" fg:w="19650659"/><text x="96.9653%" y="335.50"></text></g><g><title>[unknown] (19,650,659 samples, 0.10%)</title><rect x="96.7153%" y="309" width="0.0988%" height="15" fill="rgb(226,2,50)" fg:x="19236231827" fg:w="19650659"/><text x="96.9653%" y="319.50"></text></g><g><title>[unknown] (19,650,659 samples, 0.10%)</title><rect x="96.7153%" y="293" width="0.0988%" height="15" fill="rgb(234,177,6)" fg:x="19236231827" fg:w="19650659"/><text x="96.9653%" y="303.50"></text></g><g><title>[unknown] (19,650,659 samples, 0.10%)</title><rect x="96.7153%" y="277" width="0.0988%" height="15" fill="rgb(217,24,9)" fg:x="19236231827" fg:w="19650659"/><text x="96.9653%" y="287.50"></text></g><g><title>[unknown] (14,758,429 samples, 0.07%)</title><rect x="96.7399%" y="261" width="0.0742%" height="15" fill="rgb(220,13,46)" fg:x="19241124057" fg:w="14758429"/><text x="96.9899%" y="271.50"></text></g><g><title>[unknown] (14,758,429 samples, 0.07%)</title><rect x="96.7399%" y="245" width="0.0742%" height="15" fill="rgb(239,221,27)" fg:x="19241124057" fg:w="14758429"/><text x="96.9899%" y="255.50"></text></g><g><title>[unknown] (14,758,429 samples, 0.07%)</title><rect x="96.7399%" y="229" width="0.0742%" height="15" fill="rgb(222,198,25)" fg:x="19241124057" fg:w="14758429"/><text x="96.9899%" y="239.50"></text></g><g><title>core::num::flt2dec::digits_to_dec_str (24,452,534 samples, 0.12%)</title><rect x="96.8141%" y="549" width="0.1229%" height="15" fill="rgb(211,99,13)" fg:x="19255882486" fg:w="24452534"/><text x="97.0641%" y="559.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_shortest (9,771,671 samples, 0.05%)</title><rect x="96.9370%" y="549" width="0.0491%" height="15" fill="rgb(232,111,31)" fg:x="19280335020" fg:w="9771671"/><text x="97.1870%" y="559.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::mul_pow10 (4,892,122 samples, 0.02%)</title><rect x="96.9616%" y="533" width="0.0246%" height="15" fill="rgb(245,82,37)" fg:x="19285214569" fg:w="4892122"/><text x="97.2116%" y="543.50"></text></g><g><title>pbt::problem::Problem::solve_far (18,597,524,241 samples, 93.50%)</title><rect x="6.3203%" y="645" width="93.5040%" height="15" fill="rgb(227,149,46)" fg:x="1257082579" fg:w="18597524241"/><text x="6.5703%" y="655.50">pbt::problem::Problem::solve_far</text></g><g><title>pbt::problem::Problem::diffract_outbeams (18,597,524,241 samples, 93.50%)</title><rect x="6.3203%" y="629" width="93.5040%" height="15" fill="rgb(218,36,50)" fg:x="1257082579" fg:w="18597524241"/><text x="6.5703%" y="639.50">pbt::problem::Problem::diffract_outbeams</text></g><g><title>pbt::output::writeup (1,322,958,203 samples, 6.65%)</title><rect x="93.1728%" y="613" width="6.6515%" height="15" fill="rgb(226,80,48)" fg:x="18531648617" fg:w="1322958203"/><text x="93.4228%" y="623.50">pbt::outp..</text></g><g><title>std::io::Write::write_fmt (1,249,708,659 samples, 6.28%)</title><rect x="93.5411%" y="597" width="6.2832%" height="15" fill="rgb(238,224,15)" fg:x="18604898161" fg:w="1249708659"/><text x="93.7911%" y="607.50">std::io:..</text></g><g><title>core::fmt::write (1,235,029,299 samples, 6.21%)</title><rect x="93.6149%" y="581" width="6.2094%" height="15" fill="rgb(241,136,10)" fg:x="18619577521" fg:w="1235029299"/><text x="93.8649%" y="591.50">core::fm..</text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (1,127,396,125 samples, 5.67%)</title><rect x="94.1560%" y="565" width="5.6683%" height="15" fill="rgb(208,32,45)" fg:x="18727210695" fg:w="1127396125"/><text x="94.4060%" y="575.50">core::f..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (564,500,129 samples, 2.84%)</title><rect x="96.9861%" y="549" width="2.8382%" height="15" fill="rgb(207,135,9)" fg:x="19290106691" fg:w="564500129"/><text x="97.2361%" y="559.50">co..</text></g><g><title>__libc_start_main_impl (18,614,535,628 samples, 93.59%)</title><rect x="6.3203%" y="757" width="93.5895%" height="15" fill="rgb(206,86,44)" fg:x="1257082579" fg:w="18614535628"/><text x="6.5703%" y="767.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (18,614,535,628 samples, 93.59%)</title><rect x="6.3203%" y="741" width="93.5895%" height="15" fill="rgb(245,177,15)" fg:x="1257082579" fg:w="18614535628"/><text x="6.5703%" y="751.50">__libc_start_call_main</text></g><g><title>main (18,614,535,628 samples, 93.59%)</title><rect x="6.3203%" y="725" width="93.5895%" height="15" fill="rgb(206,64,50)" fg:x="1257082579" fg:w="18614535628"/><text x="6.5703%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (18,614,535,628 samples, 93.59%)</title><rect x="6.3203%" y="709" width="93.5895%" height="15" fill="rgb(234,36,40)" fg:x="1257082579" fg:w="18614535628"/><text x="6.5703%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (18,614,535,628 samples, 93.59%)</title><rect x="6.3203%" y="693" width="93.5895%" height="15" fill="rgb(213,64,8)" fg:x="1257082579" fg:w="18614535628"/><text x="6.5703%" y="703.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (18,614,535,628 samples, 93.59%)</title><rect x="6.3203%" y="677" width="93.5895%" height="15" fill="rgb(210,75,36)" fg:x="1257082579" fg:w="18614535628"/><text x="6.5703%" y="687.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>problem_diff::main (18,614,535,628 samples, 93.59%)</title><rect x="6.3203%" y="661" width="93.5895%" height="15" fill="rgb(229,88,21)" fg:x="1257082579" fg:w="18614535628"/><text x="6.5703%" y="671.50">problem_diff::main</text></g><g><title>pbt::problem::Problem::solve_near (17,011,387 samples, 0.09%)</title><rect x="99.8243%" y="645" width="0.0855%" height="15" fill="rgb(252,204,47)" fg:x="19854606820" fg:w="17011387"/><text x="100.0743%" y="655.50"></text></g><g><title>pbt::problem::Problem::propagate_next (17,011,387 samples, 0.09%)</title><rect x="99.8243%" y="629" width="0.0855%" height="15" fill="rgb(208,77,27)" fg:x="19854606820" fg:w="17011387"/><text x="100.0743%" y="639.50"></text></g><g><title>pbt::beam::Beam::propagate (17,011,387 samples, 0.09%)</title><rect x="99.8243%" y="613" width="0.0855%" height="15" fill="rgb(221,76,26)" fg:x="19854606820" fg:w="17011387"/><text x="100.0743%" y="623.50"></text></g><g><title>pbt::clip::Clipping::clip (17,011,387 samples, 0.09%)</title><rect x="99.8243%" y="597" width="0.0855%" height="15" fill="rgb(225,139,18)" fg:x="19854606820" fg:w="17011387"/><text x="100.0743%" y="607.50"></text></g><g><title>pbt::clip::clip_faces (17,011,387 samples, 0.09%)</title><rect x="99.8243%" y="581" width="0.0855%" height="15" fill="rgb(230,137,11)" fg:x="19854606820" fg:w="17011387"/><text x="100.0743%" y="591.50"></text></g><g><title>geo_clipper::execute_boolean_operation (17,011,387 samples, 0.09%)</title><rect x="99.8243%" y="565" width="0.0855%" height="15" fill="rgb(212,28,1)" fg:x="19854606820" fg:w="17011387"/><text x="100.0743%" y="575.50"></text></g><g><title>_ZN4core3ptr46drop_in_place$LT$geo_clipper..OwnedPolygon$GT$17hf0d5f68c74c2c936E.llvm.17884163248497212226 (17,011,387 samples, 0.09%)</title><rect x="99.8243%" y="549" width="0.0855%" height="15" fill="rgb(248,164,17)" fg:x="19854606820" fg:w="17011387"/><text x="100.0743%" y="559.50"></text></g><g><title>_start (18,617,796,618 samples, 93.61%)</title><rect x="6.3203%" y="773" width="93.6059%" height="15" fill="rgb(222,171,42)" fg:x="1257082579" fg:w="18617796618"/><text x="6.5703%" y="783.50">_start</text></g><g><title>_dl_start (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="757" width="0.0164%" height="15" fill="rgb(243,84,45)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="767.50"></text></g><g><title>_dl_start_final (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="741" width="0.0164%" height="15" fill="rgb(252,49,23)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="751.50"></text></g><g><title>_dl_sysdep_start (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="725" width="0.0164%" height="15" fill="rgb(215,19,7)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="735.50"></text></g><g><title>dl_main (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="709" width="0.0164%" height="15" fill="rgb(238,81,41)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="719.50"></text></g><g><title>_dl_map_object_deps (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="693" width="0.0164%" height="15" fill="rgb(210,199,37)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="703.50"></text></g><g><title>__GI__dl_catch_exception (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="677" width="0.0164%" height="15" fill="rgb(244,192,49)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="687.50"></text></g><g><title>openaux (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="661" width="0.0164%" height="15" fill="rgb(226,211,11)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="671.50"></text></g><g><title>_dl_map_object (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="645" width="0.0164%" height="15" fill="rgb(236,162,54)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="655.50"></text></g><g><title>_dl_map_object_from_fd (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="629" width="0.0164%" height="15" fill="rgb(220,229,9)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="639.50"></text></g><g><title>_dl_map_segments (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="613" width="0.0164%" height="15" fill="rgb(250,87,22)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="623.50"></text></g><g><title>__mmap64 (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="597" width="0.0164%" height="15" fill="rgb(239,43,17)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="607.50"></text></g><g><title>__mmap64 (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="581" width="0.0164%" height="15" fill="rgb(231,177,25)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="591.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="565" width="0.0164%" height="15" fill="rgb(219,179,1)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="575.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="549" width="0.0164%" height="15" fill="rgb(238,219,53)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="559.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="533" width="0.0164%" height="15" fill="rgb(232,167,36)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="543.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="517" width="0.0164%" height="15" fill="rgb(244,19,51)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="527.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="501" width="0.0164%" height="15" fill="rgb(224,6,22)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="511.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="485" width="0.0164%" height="15" fill="rgb(224,145,5)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="495.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="469" width="0.0164%" height="15" fill="rgb(234,130,49)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="479.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="453" width="0.0164%" height="15" fill="rgb(254,6,2)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="463.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="437" width="0.0164%" height="15" fill="rgb(208,96,46)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="447.50"></text></g><g><title>[unknown] (3,260,990 samples, 0.02%)</title><rect x="99.9099%" y="421" width="0.0164%" height="15" fill="rgb(239,3,39)" fg:x="19871618207" fg:w="3260990"/><text x="100.1599%" y="431.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (4,889,514 samples, 0.02%)</title><rect x="99.9262%" y="773" width="0.0246%" height="15" fill="rgb(233,210,1)" fg:x="19874879197" fg:w="4889514"/><text x="100.1762%" y="783.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (4,889,514 samples, 0.02%)</title><rect x="99.9262%" y="757" width="0.0246%" height="15" fill="rgb(244,137,37)" fg:x="19874879197" fg:w="4889514"/><text x="100.1762%" y="767.50"></text></g><g><title>all (19,889,548,023 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="19889548023"/><text x="0.2500%" y="815.50"></text></g><g><title>problem-diff (19,889,424,770 samples, 100.00%)</title><rect x="0.0006%" y="789" width="99.9994%" height="15" fill="rgb(239,18,37)" fg:x="123253" fg:w="19889424770"/><text x="0.2506%" y="799.50">problem-diff</text></g><g><title>pbt::diff::diffraction (9,779,312 samples, 0.05%)</title><rect x="99.9508%" y="773" width="0.0492%" height="15" fill="rgb(218,185,22)" fg:x="19879768711" fg:w="9779312"/><text x="100.2008%" y="783.50"></text></g></svg></svg>